<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Stats.Data.InputByTime">
<IncludeCode>Ensemble</IncludeCode>
<Super>%Persistent</Super>
<TimeCreated>64296,44322.823298</TimeCreated>

<Property name="TimeCreated">
<Type>%TimeStamp</Type>
<SqlColumnNumber>2</SqlColumnNumber>
</Property>

<Property name="Messages">
<Type>%Integer</Type>
</Property>

<Property name="TestName">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="1024"/>
</Property>

<UDLText name="T">
<Content><![CDATA[
/*
write ##class(Stats.Data.Profile.InputByTime).Calculate("2017-01-13 12:30:00", "2017-01-13 13:00:00", $lb("MCXXI Entrada SOAP"))
*/
]]></Content>
</UDLText>

<Method name="Calculate">
<ClassMethod>1</ClassMethod>
<FormalSpec>pTimeBegin:%TimeStamp,pTimeEnd:%TimeStamp,pHostList:%List,pTestName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ret = $$$OK
	try {
		set hostList = pHostList
		set (timeCreated, countByTime)=""
		
		set timeBegin = pTimeBegin
		set timeEnd = pTimeEnd
		
		set typeBP = ##class(Ens.DataType.MessageBusinessType).DisplayToLogical("BusinessProcess")
		set typeBO = ##class(Ens.DataType.MessageBusinessType).DisplayToLogical("BusinessOperation")
		
		// query in ODBC mode, so TimeCreated is considered in local time
		#SQLCompile Select=ODBC
		
		&sql(
		DECLARE C1 CURSOR FOR
		SELECT
		$EXTRACT(TimeCreated, 1, 19), COUNT(id)
		INTO :timeCreated, :countByTime
		FROM Ens.MessageHeader
		WHERE SourceConfigName %INLIST :hostList
		and TimeCreated BETWEEN :timeBegin AND :timeEnd
		AND TargetBusinessType IN (:typeBP, :typeBO)
		GROUP BY $EXTRACT(TimeCreated, 1, 19)
		)
		&sql(OPEN C1)
		for {
			&sql(FETCH C1)
			quit:(SQLCODE'=0)
			
			set obj = ..%New()
			
			// store local time in the stats table
			set obj.TimeCreated = ##class(Ens.DataType.UTC).timeUTCtoLocal(timeCreated)
			set obj.Messages = countByTime
			set obj.TestName = pTestName
			
			$$$ThrowOnError(obj.%Save())
		}
		&sql(CLOSE C1)
	} catch ex {
		set ret = ex.AsStatus()
	}
	quit ret
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Stats.Data.InputByTimeD</DataLocation>
<DefaultData>InputByTimeDefaultData</DefaultData>
<IdLocation>^Stats.Data.InputByTimeD</IdLocation>
<IndexLocation>^Stats.Data.InputByTimeI</IndexLocation>
<StreamLocation>^Stats.Data.InputByTimeS</StreamLocation>
<Data name="InputByTimeDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>TimeCreated</Value>
</Value>
<Value name="3">
<Value>Messages</Value>
</Value>
<Value name="4">
<Value>TestName</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>
