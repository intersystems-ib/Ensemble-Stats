<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Stats.Data.OutputByPartner">
<IncludeCode>Ensemble</IncludeCode>
<Super>%Persistent</Super>
<TimeCreated>64296,44322.823298</TimeCreated>

<Property name="SessionId">
<Type>%Integer</Type>
<SqlColumnNumber>2</SqlColumnNumber>
</Property>

<Property name="BusinessPartner">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1024"/>
</Property>

<Property name="ElapsedTime">
<Type>%Float</Type>
</Property>

<Property name="PercentElapsedTime">
<Type>%Float</Type>
</Property>

<Property name="TestName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1024"/>
</Property>

<Method name="Calculate">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pTimeBegin:%TimeStamp,pTimeEnd:%TimeStamp,&pHostList,pTestName:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ret = $$$OK
	try {
		set hostList = pHostList
		set timeBegin = pTimeBegin
		set timeEnd = pTimeEnd
		
		set typeBO = ##class(Ens.DataType.MessageBusinessType).DisplayToLogical("BusinessOperation")
		
		// query in ODBC mode, so TimeCreated is considered in local time
		#SQLCompile Select=ODBC
		
		set (sessionId)=""
		
		// ** get sessions where messages have been sent to target Business Operations
		&sql(
		DECLARE C1 CURSOR FOR
		SELECT DISTINCT(sessionId) INTO :sessionId
		FROM Ens.MessageHeader
		WHERE TargetConfigName %INLIST :hostList
		AND TimeCreated BETWEEN :timeBegin AND :timeEnd
		AND TargetBusinessType = :typeBO
		)
		&sql(OPEN C1)
		for {
			&sql(FETCH C1)
			quit:(SQLCODE'=0)
			
			set (timeFirst, timeLast, timeSession) = ""
			
			// get time of first message sent in session
			&sql(SELECT TOP 1 TimeCreated INTO :timeFirst FROM Ens.MessageHeader WHERE SessionId=:sessionId ORDER BY TimeCreated ASC)
			set:SQLCODE'=0 timeFirst=""
			
			// get time of last message sent in session
			&sql(SELECT TOP 1 TimeCreated INTO :timeLast FROM Ens.MessageHeader WHERE SessionId=:sessionId ORDER BY TimeCreated DESC)
			set:SQLCODE'=0 timeLast=""
			
			// calculate total time elapsed in session
			set timeSession = ##class(Ens.DataType.UTC).timeDiff(timeLast, timeFirst)
			
			// ** within the session: calculate elapsed time between message sent to Business Operation and response (CorrespodingMessageId)
			set (operationName, timeSent, msgReceived)=""
			kill timePartner, percentElapsedTime
			
			&sql(
			DECLARE C2 CURSOR FOR
			SELECT TargetConfigName, TimeCreated, CorrespondingMessageId INTO :operationName, :timeSent, :msgReceived
			FROM Ens.MessageHeader
			WHERE SessionId = :sessionId
			AND TargetConfigName %INLIST :hostList
			AND CorrespondingMessageId IS NOT NULL
			AND TargetBusinessType = :typeBO
			)
			&sql(OPEN C2)
			for {
				&sql(FETCH C2)
				quit:(SQLCODE'=0)
				
				&sql(SELECT TimeCreated INTO :timeReceived FROM Ens.MessageHeader WHERE id=:msgReceived)
				set:SQLCODE'=0 timeReceived=""
				
				// calculate elapsed time for Business Operation request/response
				set timeOperation = ##class(Ens.DataType.UTC).timeDiff(timeReceived, timeSent)
				
				// get operation business partner (if any)
				kill settings
				$$$ThrowOnError(##class(Ens.Director).GetHostSettings(operationName, .settings))
				set businessPartner = $get(settings("BusinessPartner"))
				set:businessPartner="" businessPartner=operationName
				
				// accumulate elapsed time by BusinessPartner configured in Business Operation
				set timePartner(businessPartner) = $get(timePartner(businessPartner)) + timeOperation
			}
			&sql(CLOSE C2)
			
			// loop over business partners time entries and insert business partners stats into table
			set bPartner = ""
			set partnersTotalTime = 0
			for {
				set bPartner = $order(timePartner(bPartner))
				quit:bPartner=""
				
				set partnersTotalTime = partnersTotalTime + timePartner(bPartner)
				
				// calculate % of time that business partner is responsible for
				set percentElapsedTime = timePartner(bPartner) / timeSession
				
				// insert data into stats table
				set obj = ..%New()
				set obj.SessionId = sessionId
				set obj.BusinessPartner = bPartner
				set obj.ElapsedTime = timePartner(bPartner)
				set obj.PercentElapsedTime = percentElapsedTime
				set obj.TestName = pTestName
				$$$ThrowOnError(obj.%Save())
			}
			
			// remaining elapsed time is Ensemble responsability, insert Ensemble stats into table 
			set obj = ..%New()
			set obj.SessionId = sessionId
			set obj.BusinessPartner = "Ensemble"
			set obj.ElapsedTime = timeSession - partnersTotalTime 
			set obj.PercentElapsedTime = (timeSession - partnersTotalTime)/timeSession
			set obj.TestName = pTestName
			$$$ThrowOnError(obj.%Save())
			
		}
		&sql(CLOSE C1)
	} catch ex {
		set ret = ex.AsStatus()
	}
	quit ret
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Stats.Data.OutputByPartnerD</DataLocation>
<DefaultData>OutputByPartnerDefaultData</DefaultData>
<IdLocation>^Stats.Data.OutputByPartnerD</IdLocation>
<IndexLocation>^Stats.Data.OutputByPartnerI</IndexLocation>
<StreamLocation>^Stats.Data.OutputByPartnerS</StreamLocation>
<Data name="OutputByPartnerDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>SessionId</Value>
</Value>
<Value name="3">
<Value>BusinessPartner</Value>
</Value>
<Value name="4">
<Value>ElapsedTime</Value>
</Value>
<Value name="5">
<Value>PercentElapsedTime</Value>
</Value>
<Value name="6">
<Value>TestName</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>
